#!/usr/bin/env node

/**
 * Log monitoring utility for debugging signup issues
 * This script helps monitor both application and database logs
 */

const { createClient } = require('@supabase/supabase-js');

// Helper function to format timestamps
const formatTime = (date = new Date()) => {
  return date.toISOString().replace('T', ' ').replace('Z', '');
};

// Helper function to check database logs
const checkDatabaseLogs = async () => {
  console.log('\nüîç Checking recent database logs...');
  
  // This would require access to your Supabase logs
  // For now, we'll provide instructions on how to check them
  console.log('üìã To check database logs in Supabase:');
  console.log('   1. Go to your Supabase Dashboard');
  console.log('   2. Navigate to Logs ‚Üí Database');
  console.log('   3. Look for messages starting with "handle_new_user:"');
  console.log('   4. Check for any WARNING or ERROR messages');
  console.log('');
};

// Helper function to simulate a signup test
const testSignupFlow = async () => {
  console.log('üß™ Testing signup flow...');
  
  const testData = {
    email: 'test@ufba.br',
    password: 'test123456',
    full_name: 'Test User',
    user_type: 'student'
  };
  
  console.log('Test data that would be sent:', testData);
  console.log('');
  console.log('üìù Expected log sequence:');
  console.log('   1. ‚úÖ All validations passed');
  console.log('   2. üîÑ Attempting Supabase signup with metadata');
  console.log('   3. ‚úÖ User created successfully OR ‚ùå Auth signup error');
  console.log('   4. Database trigger: "handle_new_user: Starting profile creation"');
  console.log('   5. Database trigger: "handle_new_user: Successfully created profile" OR error');
  console.log('   6. ‚úÖ Signup completed');
  console.log('');
};

// Main monitoring function
const monitorLogs = () => {
  console.log('üöÄ Signup Log Monitor Started');
  console.log('=' .repeat(50));
  console.log(`üìÖ Started at: ${formatTime()}`);
  console.log('');
  
  console.log('üìã Instructions for debugging:');
  console.log('');
  
  console.log('1. üñ•Ô∏è  Monitor Application Logs:');
  console.log('   ‚Ä¢ Open terminal and run: npm run dev');
  console.log('   ‚Ä¢ Look for logs starting with === SIGNUP ACTION START ===');
  console.log('   ‚Ä¢ Check for ‚ùå errors or ‚úÖ success messages');
  console.log('');
  
  console.log('2. üóÑÔ∏è  Monitor Database Logs:');
  console.log('   ‚Ä¢ Go to Supabase Dashboard ‚Üí Logs ‚Üí Database');
  console.log('   ‚Ä¢ Filter by "handle_new_user" to see trigger logs');
  console.log('   ‚Ä¢ Look for WARNING or ERROR messages');
  console.log('');
  
  console.log('3. üß™ Test the Signup:');
  console.log('   ‚Ä¢ Go to http://localhost:3000/sign-up');
  console.log('   ‚Ä¢ Fill in the form and submit');
  console.log('   ‚Ä¢ Check both application and database logs');
  console.log('');
  
  testSignupFlow();
  checkDatabaseLogs();
  
  console.log('üí° Common Issues to Look For:');
  console.log('   ‚Ä¢ Missing or invalid user_type in metadata');
  console.log('   ‚Ä¢ Database connection issues');
  console.log('   ‚Ä¢ Permission errors on user_profiles table');
  console.log('   ‚Ä¢ Enum casting errors (student/professor)');
  console.log('   ‚Ä¢ Row Level Security policy violations');
  console.log('');
  
  console.log('üîß Quick Fixes:');
  console.log('   ‚Ä¢ Verify user_type is "student" or "professor"');
  console.log('   ‚Ä¢ Check if user_profiles table exists');
  console.log('   ‚Ä¢ Verify RLS policies allow INSERT');
  console.log('   ‚Ä¢ Check database trigger is properly installed');
  console.log('');
  
  console.log('üéØ Next Steps:');
  console.log('   1. Try creating an account at http://localhost:3000/sign-up');
  console.log('   2. Monitor the logs in both terminal and Supabase dashboard');
  console.log('   3. Share any error messages you see');
  console.log('');
};

// Export for use in other scripts
module.exports = { monitorLogs, formatTime };

// Run if called directly
if (require.main === module) {
  monitorLogs();
} 